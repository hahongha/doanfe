import React, { useState } from 'react';
import { FormControl, InputLabel, MenuItem, Select } from '@mui/material';
import { Card, Typography, Grid, Paper } from '@mui/material';
import { Line } from 'react-chartjs-2';
import { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';
import StatisticsButtons from './StatisticsButtons';
import MonthlyStatsLineChart from './MonthlyStatsLineChart';

ChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);


const Report = () => {
    const data = {
  "totalIncome": 100000000,
  "totalExpenses": 75000000,
  "profit": 25000000,
  "monthlyStats": [
    {
      "month": "Th√°ng 1",
      "income": 8000000,
      "expenses": 5000000,
      "profit": 3000000
    },
    {
      "month": "Th√°ng 2",
      "income": 12000000,
      "expenses": 7000000,
      "profit": 5000000
    },
    {
      "month": "Th√°ng 3",
      "income": 15000000,
      "expenses": 10000000,
      "profit": 5000000
    },
    {
      "month": "Th√°ng 4",
      "income": 20000000,
      "expenses": 15000000,
      "profit": 5000000
    },
    {
      "month": "Th√°ng 5",
      "income": 20000000,
      "expenses": 15000000,
      "profit": 5000000
    },
    {
      "month": "Th√°ng 6",
      "income": 20000000,
      "expenses": 15000000,
      "profit": 5000000
    },{
      "month": "Th√°ng 7",
      "income": 20000000,
      "expenses": 15000000,
      "profit": 5000000
    },{
      "month": "Th√°ng 8",
      "income": 20000000,
      "expenses": 15000000,
      "profit": 5000000
    },{
      "month": "Th√°ng 9",
      "income": 20000000,
      "expenses": 15000000,
      "profit": 5000000
    },{
      "month": "Th√°ng 10",
      "income": 20000000,
      "expenses": 15000000,
      "profit": 5000000
    },{
      "month": "Th√°ng 11",
      "income": 20000000,
      "expenses": 15000000,
      "profit": 5000000
    }
  ],
  "expensesBreakdown": [
    {
      "category": "Ti·ªÅn ƒëi·ªán",
      "amount": 2000000
    },
    {
      "category": "Ti·ªÅn n∆∞·ªõc",
      "amount": 1500000
    },
    {
      "category": "B·∫£o tr√¨",
      "amount": 1000000
    },
    {
      "category": "Ph√≠ qu·∫£n l√Ω",
      "amount": 500000
    }
  ]
};
  const { totalIncome, totalExpenses, profit, monthlyStats, expensesBreakdown } = data;
  const [year, setYear] = useState(new Date().getFullYear());
  const years = [];

  // T·∫°o danh s√°ch nƒÉm t·ª´ 2020 ƒë·∫øn nƒÉm hi·ªán t·∫°i + 1
  for (let i = 2020; i <= new Date().getFullYear() + 1; i++) {
    years.push(i);
  }

  const handleChange = (event) => {
    setYear(event.target.value);
    // X·ª≠ l√Ω th·ªëng k√™ theo nƒÉm t·∫°i ƒë√¢y
    console.log("Selected year:", event.target.value);
  };
  return (
    <Grid container spacing={3}>
        <Grid item xs={12}>
        <FormControl sx={{ minWidth: 200 }}>
      <InputLabel id="year-select-label">Ch·ªçn nƒÉm</InputLabel>
      <Select
        labelId="year-select-label"
        value={year}
        label="Ch·ªçn nƒÉm"
        onChange={handleChange}
      >
        {years.map((y) => (
          <MenuItem key={y} value={y}>
            {y}
          </MenuItem>
        ))}
      </Select>
    </FormControl>
      </Grid>
      <Grid item xs={12} sm={6} md={3}>
        <Card>
          <Paper elevation={3} sx={{ padding: 2, textAlign: 'center' }}>
            <Typography variant="h6">T·ªïng thu nh·∫≠p</Typography>
            <Typography variant="h4">{totalIncome.toLocaleString()} VND</Typography>
          </Paper>
        </Card>
      </Grid>
      <Grid item xs={12} sm={6} md={3}>
        <Card>
          <Paper elevation={3} sx={{ padding: 2, textAlign: 'center' }}>
            <Typography variant="h6">T·ªïng chi ph√≠</Typography>
            <Typography variant="h4">{totalExpenses.toLocaleString()} VND</Typography>
          </Paper>
        </Card>
      </Grid>
      <Grid item xs={12} sm={6} md={3}>
        <Card>
          <Paper elevation={3} sx={{ padding: 2, textAlign: 'center' }}>
            <Typography variant="h6">L·ª£i nhu·∫≠n</Typography>
            <Typography variant="h4">{profit.toLocaleString()} VND</Typography>
          </Paper>
        </Card>
      </Grid>
      <Grid item xs={12}>
        <MonthlyStatsLineChart/>
      </Grid>
        {/* <Grid item xs={12}>
           <StatisticsButtons/>
        </Grid> */}
    </Grid>
    
  );
};

export default Report;
import React from 'react';
import {
  Grid, Card, CardContent, Typography, Box
} from '@mui/material';
import {
  LineChart, Line, XAxis, YAxis, Tooltip, ResponsiveContainer, Legend, PieChart, Pie, Cell
} from 'recharts';

const COLORS = ['#4caf50', '#ff9800', '#f44336'];

const contractByMonth = [
  { month: '1', count: 10 },
  { month: '2', count: 12 },
  { month: '3', count: 8 },
  { month: '4', count: 15 },
  { month: '5', count: 18 },
  { month: '6', count: 10 },
  { month: '7', count: 12 },
  { month: '8', count: 8 },
  { month: '9', count: 15 },
  { month: '10', count: 18 },
  { month: '11', count: 15 },
  { month: '12', count: 18 },
];

const paymentStatus = [
  { name: 'ƒê√£ thanh to√°n', value: 40 },
  { name: 'C√≤n n·ª£', value: 10 },
  { name: 'Tr·ªÖ h·∫°n', value: 5 },
];

const durationStats = [
  { name: 'Ng·∫Øn h·∫°n (<6 th√°ng)', value: 10 },
  { name: 'Trung h·∫°n (6-12 th√°ng)', value: 25 },
  { name: 'D√†i h·∫°n (>12 th√°ng)', value: 20 },
];

const ContractStats = () => {
  return (
    <Box sx={{ p: 2 }}>
      <Typography variant="h5" gutterBottom>
        üìÑ Th·ªëng k√™ h·ª£p ƒë·ªìng thu√™ ph√≤ng
      </Typography>

      <Grid container spacing={3}>
        {/* T·ªïng quan h·ª£p ƒë·ªìng */}
        {[
          { label: 'T·ªïng h·ª£p ƒë·ªìng ƒëang hi·ªáu l·ª±c', value: 55 },
          { label: 'H·ª£p ƒë·ªìng s·∫Øp h·∫øt h·∫°n', value: 5 },
          { label: 'H·ª£p ƒë·ªìng m·ªõi th√°ng n√†y', value: 12 },
          { label: 'H·ª£p ƒë·ªìng ƒë√£ k·∫øt th√∫c', value: 20 },
        ].map((item, idx) => (
          <Grid item xs={12} sm={6} md={3} key={idx}>
            <Card>
              <CardContent>
                <Typography variant="subtitle1">{item.label}</Typography>
                <Typography variant="h5" color="primary">{item.value}</Typography>
              </CardContent>
            </Card>
          </Grid>
        ))}

        {/* Bi·ªÉu ƒë·ªì s·ªë l∆∞·ª£ng h·ª£p ƒë·ªìng theo th√°ng */}
        <Grid item xs={12} md={6}>
          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                üìà H·ª£p ƒë·ªìng m·ªõi theo t·ª´ng th√°ng
              </Typography>
              <Typography variant="body2" gutterBottom color="text.secondary">
                Bi·ªÉu ƒë·ªì ƒë∆∞·ªùng th·ªÉ hi·ªán s·ªë l∆∞·ª£ng h·ª£p ƒë·ªìng m·ªõi ƒë∆∞·ª£c k√Ω theo t·ª´ng th√°ng.
              </Typography>
              <ResponsiveContainer width="100%" height={250}>
                <LineChart data={contractByMonth}>
                  <XAxis dataKey="month" />
                  <YAxis />
                  <Tooltip />
                  <Legend />
                  <Line type="monotone" dataKey="count" name="S·ªë h·ª£p ƒë·ªìng" stroke="#1976d2" strokeWidth={2} />
                </LineChart>
              </ResponsiveContainer>
            </CardContent>
          </Card>
        </Grid>

        {/* Bi·ªÉu ƒë·ªì t√¨nh tr·∫°ng thanh to√°n */}
        <Grid item xs={12} md={6}>
          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                üí∞ T√¨nh tr·∫°ng thanh to√°n
              </Typography>
              <Typography variant="body2" gutterBottom color="text.secondary">
                Bi·ªÉu ƒë·ªì tr√≤n th·ªÉ hi·ªán t·ª∑ l·ªá h·ª£p ƒë·ªìng ƒë√£ thanh to√°n, c√≤n n·ª£ ho·∫∑c tr·ªÖ h·∫°n.
              </Typography>
              <ResponsiveContainer width="100%" height={250}>
                <PieChart>
                  <Pie
                    data={paymentStatus}
                    cx="50%" cy="50%" outerRadius={80}
                    dataKey="value" label
                  >
                    {paymentStatus.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                    ))}
                  </Pie>
                  <Legend />
                  <Tooltip />
                </PieChart>
              </ResponsiveContainer>
            </CardContent>
          </Card>
        </Grid>

        {/* Bi·ªÉu ƒë·ªì th·ªùi h·∫°n h·ª£p ƒë·ªìng */}
        <Grid item xs={12} md={6}>
          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                ‚è≥ Ph√¢n lo·∫°i theo th·ªùi h·∫°n h·ª£p ƒë·ªìng
              </Typography>
              <Typography variant="body2" gutterBottom color="text.secondary">
                Bi·ªÉu ƒë·ªì tr√≤n th·ªÉ hi·ªán s·ªë l∆∞·ª£ng h·ª£p ƒë·ªìng theo th·ªùi h·∫°n: ng·∫Øn, trung v√† d√†i h·∫°n.
              </Typography>
              <ResponsiveContainer width="100%" height={250}>
                <PieChart>
                  <Pie
                    data={durationStats}
                    cx="50%" cy="50%" outerRadius={80}
                    dataKey="value" label
                  >
                    {durationStats.map((entry, index) => (
                      <Cell key={`cell-dur-${index}`} fill={COLORS[index % COLORS.length]} />
                    ))}
                  </Pie>
                  <Legend />
                  <Tooltip />
                </PieChart>
              </ResponsiveContainer>
            </CardContent>
          </Card>
        </Grid>
      </Grid>
    </Box>
  );
};

export default ContractStats;
